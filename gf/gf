#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  resolve_date=""
  target_host=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    "area-seed-get" \
    "proximity-tools"
  _check_cmd \
    "bssid-scan" \
    "bssid-tools"
  _check_cmd \
    "dynssh"
  _check_cmd \
    "wifi-proximity-score" \
    "proximity-tools"
}

_target_area_seed_get() {
  local \
    _target_host="${1}" \
    _dynssh_opts=() \
    _cmd=() \
    _seed
  _dynssh_opts+=(
    -t
      "${_target_host}"
  )
  _cmd=(
    'area-seed-get'
      '$(bssid-scan)'
  ) 
  _seed="$( \
    dynssh \
      "${_dynssh_opts[@]}" -- \
      "${_target_host}" \
      "${_cmd[*]}")"
  echo \
    "${_seed}"
}

_wifi_proximity_score_get() {
  local \
    _target_host="${1}" \
    _bssids=() \
    _seed=()
  _seed+=( $( \
    _target_area_seed_get \
      "${_target_host}")
  )
  wifi-proximity-score \
    "${_seed[@]}"
}

# Geofencer
# $@: area seed (sha256sums of area bssids)
_gf() {
  local \
    _target_host="${1}" \
    _wifi_proximity_score
  _wifi_proximity_score="$( \
    _wifi_proximity_score_get \
      "${_target_host}")"
  if (( 0 < "${_wifi_proximity_score}" )); then
    echo \
      "wifi"
  else
    echo \
      'wan'
  fi
}

_set_overrides() {
  _set_override \
    "resolve" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "target" \
    "host" \
    ''
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
assumed vulnerable geofencer
usage:
  $(_get "app" "name")
    [options]
  options:
     -t <target_host>     Host to get proximity to.
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "             Resolve date:   $(_get "resolve" "date")"
  _msg_info "              Target host:   $(_get "target" "host")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    't:cvh?' \
    arg; do
  case \
    "${arg}" in
    t) override_target_host="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
_set_overrides
app_opts=(
  "${target_host}"
)
if [[ "${target_host}" == "" ]]; then
  _msg_error \
    "a target host must be specified with -t" \
    1
fi
_show_config
_gf \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
