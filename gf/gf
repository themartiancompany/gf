#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  target_host=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    "area-seed-get" \
    "proximity-tools"
  _check_cmd \
    "bssid-scan" \
    "bssid-tools"
  _check_cmd \
    "dynssh"
  _check_cmd \
    "wifi-proximity-score" \
    "proximity-tools"
}

_wifi_proximity_score_get() {
  local \
    _target_host="${1}" \
    _bssids=() \
    _dynssh_opts=() \
    _remote_cmd=()
  _dynssh_opts+=(
    -t
      "${_target_host}"
  )
  _cmd=(
    dynssh
      "${_dynssh_opts[@]}" --
      "${_scan_tool}"
  )
  _remote_cmd+=(
    area-address
  )
  _bssids+=( $( \
    "${_cmd[@]}")
  )
  for _bssid in "${_bssids[@]}"; do
    _checksum \
      "${_bssid}"
  done
}

# Geofencer
# $@: area seed (sha256sums of area bssids)
_gf() {
  local \
    _target_host="${1}" \
    _wifi_proximity_score
  _wifi_proximity_score="$( \
    _wifi_area_seed_get \
      "${_target_host}")"
  _bsss=( $( \
    bssid-scan)
  )
  for _bssid in "${_bsss[@]}"; do
    _sight="$( \
      _sight_get \
        "${_bssid}")"
    for _pic in \
      "${_pics}"; do
      if [[ "${_pic}" == "${_sight}" ]]; then
        _score="$((_score + 1))"
      fi
    done
  done
  echo \
    "${_score}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
assumed vulnerable geofencer
usage:
  $(_get "app" "name")
    [options]
    [area seed]
  options:
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _resolve_date
  TZ=UTC \
    printf \
      -v _resolve_date \
      '%(%FT%R%z)T' \
      "${SOURCE_DATE_EPOCH}"
  _msg_info "${app_name} configuration"
  _msg_info "             Resolve date:   $(_get "_resolve" "date")"
  _msg_info "                Area seed:   $(_get "area" "seed")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    't:cvh?' \
    arg; do
  case \
    "${arg}" in
    t) override_target_host="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
area_seed=(
  "$@"
)
_set_overrides
app_opts=(
  "${_target_host}"
  "${area_seed[@]}"
)
if [[ "${area_seed[*]}" == "" ]]; then
  _msg_error \
    "no area seed given" \
    0
  _usage \
    1
fi
_show_config
_gf \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
